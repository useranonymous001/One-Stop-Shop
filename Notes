        ::: SITE DETAILS :::

# Usermodel

    - fullname : string
    - email : string
    - password : string
    - cart  : array of ID
    - isAdmin  : Boolean
    - Orders : array
    - contact : number
    - Profile : db

# Product Model

    - image
    - name
    - Price
    - isInDiscount
    - bgColor
    - Panel Color
    - Text Color

# Using Debuggers

    - npm i debug
    # It shows the message : development:mongoose while we run the program
    # It must be done in the mongoose_connection files not in the app
    - const dbgr = require("debug")("development:mongoose");

After this set the environment variables to see the changes of the code. - set DEBUG=development: \* #no space after colon

# We can also now set the environment variable to the url connecting the database i.e., mongodb://localhost:27017/smthg but we will do it by setting up in the config folder.

    - create development.json in the config folder
    - now write the code:
        {
            "MONGODB_URI": "mongodb://127.0.0.1:27017"  #cut the uri part and leave the other part there.
        }
    - Now, before doing anything install config using npm:
        - npm i config
    - And then require the config file in the mongoose_connection.js
        -> const config  = require("config")

    - Finally, change the mongoose.connect("/laziStore") with this:
        `${config.get("MONGODB_URL")}/laziStore`

# ROUTES

    If we want some routes that we only want to run in the development phase then we can set "env" to the "development" using cmd :
        - set NODE_ENV=development

    If this won't work in the cmd try using this in the powershell:
        - $env:NODE_ENV="production"

    Run:
        console.log(process.env.NODE_ENV)

    But Why to set UP this things:
        NODE ENV is a flag to show whether the server is operating in production or development mode. The express framework determines the flag's value based on the environment and verifies it during runtime.

# DYNAMIC ROUTES WE WILL BE CREATING

    / -> signup or login
    /shop -> shop display
    /user/cart -> cart
    /admin -> admin login panel
    /owner/products -> show all products
    /owner/admin -> show admin panel to create products


    // short notes
        tokens are generated in utils folder and expporrted to the /controller folder
        authentication routes are created in /controller function and exported to app.js
        secret keys are then exported from the .env and /config/keys.js folder



      <!-- <div class="w-[25%] flex h-screen flex-col items-start">
        <div class="flex items-center gap-2">
          <h3>Sort by</h3>
          <form action="/shop">
            <select class="border-[1px] px-2 py-1" name="sortby" id="">
              <option value="popular">Popular</option>
              <option value="newest">Newest</o  ption>
            </select>
          </form>
        </div>
        <div class="flex flex-col mt-20">
          <a class="block w-fit mb-2" href="">New Collection</a>
          <a class="block w-fit mb-2" href="">All Products</a>
          <a class="block w-fit mb-2" href=""> Products</a>
        </div>
        <div class="mt-32">
          <a class="block w-fit mb-2" href="">Filter by :</a>
          <a class="block w-fit mb-2" href="">Availability</a>
          <a class="block w-fit mb-2" href="">Discount</a>
        </div>
      </div> -->
